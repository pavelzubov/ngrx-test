/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { DashboardChartValue } from '../model/dashboardChartValue';
import { DashboardPortfolioEvents } from '../model/dashboardPortfolioEvents';
import { DashboardSummary } from '../model/dashboardSummary';
import { ErrorViewModel } from '../model/errorViewModel';
import { FundInvestInfo } from '../model/fundInvestInfo';
import { FundWithdrawInfo } from '../model/fundWithdrawInfo';
import { FundsList } from '../model/fundsList';
import { ProgramInvestInfo } from '../model/programInvestInfo';
import { ProgramRequests } from '../model/programRequests';
import { ProgramWithdrawInfo } from '../model/programWithdrawInfo';
import { ProgramsList } from '../model/programsList';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class InvestorService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Investing into the fund
     *
     * @param id
     * @param amount
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10InvestorFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
        }
        if (amount === null || amount === undefined) {
            throw new Error('Required parameter amount was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorFundsByIdInvestByAmountPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/investor/funds/${encodeURIComponent(String(id))}/invest/${encodeURIComponent(String(amount))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Data for investing into the fund
     *
     * @param id
     * @param currency
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<FundInvestInfo>;
    public v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FundInvestInfo>>;
    public v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FundInvestInfo>>;
    public v10InvestorFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorFundsByIdInvestInfoByCurrencyGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<FundInvestInfo>(`${this.basePath}/v1.0/investor/funds/${encodeURIComponent(String(id))}/invest/info/${encodeURIComponent(String(currency))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get program/fund requests
     *
     * @param id
     * @param skip
     * @param take
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ProgramRequests>;
    public v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProgramRequests>>;
    public v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProgramRequests>>;
    public v10InvestorFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
        }
        if (skip === null || skip === undefined) {
            throw new Error('Required parameter skip was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
        }
        if (take === null || take === undefined) {
            throw new Error('Required parameter take was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorFundsByIdRequestsBySkipByTakeGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProgramRequests>(`${this.basePath}/v1.0/investor/funds/${encodeURIComponent(String(id))}/requests/${encodeURIComponent(String(skip))}/${encodeURIComponent(String(take))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Withdraw from fund. Percent is % of investor total money.
     *
     * @param id
     * @param percent
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10InvestorFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
        }
        if (percent === null || percent === undefined) {
            throw new Error('Required parameter percent was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorFundsByIdWithdrawByPercentPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/investor/funds/${encodeURIComponent(String(id))}/withdraw/${encodeURIComponent(String(percent))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Data for withdrawal from fund
     *
     * @param id
     * @param currency
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<FundWithdrawInfo>;
    public v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FundWithdrawInfo>>;
    public v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FundWithdrawInfo>>;
    public v10InvestorFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorFundsByIdWithdrawInfoByCurrencyGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<FundWithdrawInfo>(`${this.basePath}/v1.0/investor/funds/${encodeURIComponent(String(id))}/withdraw/info/${encodeURIComponent(String(currency))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Funds list
     *
     * @param authorization JWT access token
     * @param sorting
     * @param from
     * @param to
     * @param chartPointsCount
     * @param currencySecondary
     * @param skip
     * @param take
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'body', reportProgress?: boolean): Observable<FundsList>;
    public v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FundsList>>;
    public v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FundsList>>;
    public v10InvestorFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorFundsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sorting !== undefined) {
            queryParameters = queryParameters.set('Sorting', <any>sorting);
        }
        if (from !== undefined) {
            queryParameters = queryParameters.set('From', <any>from.toISOString());
        }
        if (to !== undefined) {
            queryParameters = queryParameters.set('To', <any>to.toISOString());
        }
        if (chartPointsCount !== undefined) {
            queryParameters = queryParameters.set('ChartPointsCount', <any>chartPointsCount);
        }
        if (currencySecondary !== undefined) {
            queryParameters = queryParameters.set('CurrencySecondary', <any>currencySecondary);
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('Skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters = queryParameters.set('Take', <any>take);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<FundsList>(`${this.basePath}/v1.0/investor/funds`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Summary dashboard info
     *
     * @param authorization JWT access token
     * @param chartCurrency
     * @param from
     * @param to
     * @param balancePoints
     * @param programsPoints
     * @param eventsTake
     * @param requestsSkip
     * @param requestsTake
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, observe?: 'body', reportProgress?: boolean): Observable<DashboardSummary>;
    public v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DashboardSummary>>;
    public v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DashboardSummary>>;
    public v10InvestorGet(authorization: string, chartCurrency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, eventsTake?: number, requestsSkip?: number, requestsTake?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (chartCurrency !== undefined) {
            queryParameters = queryParameters.set('chartCurrency', <any>chartCurrency);
        }
        if (from !== undefined) {
            queryParameters = queryParameters.set('From', <any>from.toISOString());
        }
        if (to !== undefined) {
            queryParameters = queryParameters.set('To', <any>to.toISOString());
        }
        if (balancePoints !== undefined) {
            queryParameters = queryParameters.set('BalancePoints', <any>balancePoints);
        }
        if (programsPoints !== undefined) {
            queryParameters = queryParameters.set('ProgramsPoints', <any>programsPoints);
        }
        if (eventsTake !== undefined) {
            queryParameters = queryParameters.set('eventsTake', <any>eventsTake);
        }
        if (requestsSkip !== undefined) {
            queryParameters = queryParameters.set('requestsSkip', <any>requestsSkip);
        }
        if (requestsTake !== undefined) {
            queryParameters = queryParameters.set('requestsTake', <any>requestsTake);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DashboardSummary>(`${this.basePath}/v1.0/investor`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Portfolio charts
     *
     * @param authorization JWT access token
     * @param currency
     * @param from
     * @param to
     * @param balancePoints
     * @param programsPoints
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, observe?: 'body', reportProgress?: boolean): Observable<DashboardChartValue>;
    public v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DashboardChartValue>>;
    public v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DashboardChartValue>>;
    public v10InvestorPortfolioChartGet(authorization: string, currency?: string, from?: Date, to?: Date, balancePoints?: number, programsPoints?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorPortfolioChartGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (currency !== undefined) {
            queryParameters = queryParameters.set('currency', <any>currency);
        }
        if (from !== undefined) {
            queryParameters = queryParameters.set('From', <any>from.toISOString());
        }
        if (to !== undefined) {
            queryParameters = queryParameters.set('To', <any>to.toISOString());
        }
        if (balancePoints !== undefined) {
            queryParameters = queryParameters.set('BalancePoints', <any>balancePoints);
        }
        if (programsPoints !== undefined) {
            queryParameters = queryParameters.set('ProgramsPoints', <any>programsPoints);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DashboardChartValue>(`${this.basePath}/v1.0/investor/portfolio/chart`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Portfolio events
     *
     * @param authorization JWT access token
     * @param assetId
     * @param from
     * @param to
     * @param type
     * @param assetType
     * @param skip
     * @param take
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe?: 'body', reportProgress?: boolean): Observable<DashboardPortfolioEvents>;
    public v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DashboardPortfolioEvents>>;
    public v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DashboardPortfolioEvents>>;
    public v10InvestorPortfolioEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorPortfolioEventsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (assetId !== undefined) {
            queryParameters = queryParameters.set('AssetId', <any>assetId);
        }
        if (from !== undefined) {
            queryParameters = queryParameters.set('From', <any>from.toISOString());
        }
        if (to !== undefined) {
            queryParameters = queryParameters.set('To', <any>to.toISOString());
        }
        if (type !== undefined) {
            queryParameters = queryParameters.set('Type', <any>type);
        }
        if (assetType !== undefined) {
            queryParameters = queryParameters.set('AssetType', <any>assetType);
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('Skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters = queryParameters.set('Take', <any>take);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DashboardPortfolioEvents>(`${this.basePath}/v1.0/investor/portfolio/events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Investing into the program
     *
     * @param id
     * @param amount
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10InvestorProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
        }
        if (amount === null || amount === undefined) {
            throw new Error('Required parameter amount was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdInvestByAmountPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/investor/programs/${encodeURIComponent(String(id))}/invest/${encodeURIComponent(String(amount))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Data for investing into the program
     *
     * @param id
     * @param currency
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ProgramInvestInfo>;
    public v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProgramInvestInfo>>;
    public v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProgramInvestInfo>>;
    public v10InvestorProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdInvestInfoByCurrencyGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProgramInvestInfo>(`${this.basePath}/v1.0/investor/programs/${encodeURIComponent(String(id))}/invest/info/${encodeURIComponent(String(currency))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Disable reinvesting
     *
     * @param id
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10InvestorProgramsByIdReinvestOffPost(id: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorProgramsByIdReinvestOffPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdReinvestOffPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/investor/programs/${encodeURIComponent(String(id))}/reinvest/off`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Enable reinvesting
     *
     * @param id
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10InvestorProgramsByIdReinvestOnPost(id: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorProgramsByIdReinvestOnPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdReinvestOnPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/investor/programs/${encodeURIComponent(String(id))}/reinvest/on`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get program/fund requests
     *
     * @param id
     * @param skip
     * @param take
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ProgramRequests>;
    public v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProgramRequests>>;
    public v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProgramRequests>>;
    public v10InvestorProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
        }
        if (skip === null || skip === undefined) {
            throw new Error('Required parameter skip was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
        }
        if (take === null || take === undefined) {
            throw new Error('Required parameter take was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdRequestsBySkipByTakeGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProgramRequests>(`${this.basePath}/v1.0/investor/programs/${encodeURIComponent(String(id))}/requests/${encodeURIComponent(String(skip))}/${encodeURIComponent(String(take))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Withdraw from investment program
     *
     * @param id
     * @param amount
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10InvestorProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
        }
        if (amount === null || amount === undefined) {
            throw new Error('Required parameter amount was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawByAmountPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/investor/programs/${encodeURIComponent(String(id))}/withdraw/${encodeURIComponent(String(amount))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Data for withdrawal from investment program
     *
     * @param id
     * @param currency
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ProgramWithdrawInfo>;
    public v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProgramWithdrawInfo>>;
    public v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProgramWithdrawInfo>>;
    public v10InvestorProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorProgramsByIdWithdrawInfoByCurrencyGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProgramWithdrawInfo>(`${this.basePath}/v1.0/investor/programs/${encodeURIComponent(String(id))}/withdraw/info/${encodeURIComponent(String(currency))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Dashboard program list
     *
     * @param authorization JWT access token
     * @param sorting
     * @param from
     * @param to
     * @param chartPointsCount
     * @param currencySecondary
     * @param skip
     * @param take
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'body', reportProgress?: boolean): Observable<ProgramsList>;
    public v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProgramsList>>;
    public v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProgramsList>>;
    public v10InvestorProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorProgramsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sorting !== undefined) {
            queryParameters = queryParameters.set('Sorting', <any>sorting);
        }
        if (from !== undefined) {
            queryParameters = queryParameters.set('From', <any>from.toISOString());
        }
        if (to !== undefined) {
            queryParameters = queryParameters.set('To', <any>to.toISOString());
        }
        if (chartPointsCount !== undefined) {
            queryParameters = queryParameters.set('ChartPointsCount', <any>chartPointsCount);
        }
        if (currencySecondary !== undefined) {
            queryParameters = queryParameters.set('CurrencySecondary', <any>currencySecondary);
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('Skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters = queryParameters.set('Take', <any>take);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProgramsList>(`${this.basePath}/v1.0/investor/programs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cancel investment program request
     *
     * @param id
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10InvestorProgramsRequestsByIdCancelPost(id: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10InvestorProgramsRequestsByIdCancelPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorProgramsRequestsByIdCancelPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/investor/programs/requests/${encodeURIComponent(String(id))}/cancel`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all requests
     *
     * @param skip
     * @param take
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ProgramRequests>;
    public v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProgramRequests>>;
    public v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProgramRequests>>;
    public v10InvestorRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (skip === null || skip === undefined) {
            throw new Error('Required parameter skip was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
        }
        if (take === null || take === undefined) {
            throw new Error('Required parameter take was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10InvestorRequestsBySkipByTakeGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProgramRequests>(`${this.basePath}/v1.0/investor/requests/${encodeURIComponent(String(skip))}/${encodeURIComponent(String(take))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
