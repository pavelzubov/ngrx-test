/**
 * Core API v1.0
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ErrorViewModel } from '../model/errorViewModel';
import { FundAssetPart } from '../model/fundAssetPart';
import { FundInvestInfo } from '../model/fundInvestInfo';
import { FundsList } from '../model/fundsList';
import { ManagerAssets } from '../model/managerAssets';
import { ManagerDashboard } from '../model/managerDashboard';
import { ManagerFundWithdrawInfo } from '../model/managerFundWithdrawInfo';
import { ManagerPortfolioEvents } from '../model/managerPortfolioEvents';
import { ManagerProfile } from '../model/managerProfile';
import { ManagerProfileDetails } from '../model/managerProfileDetails';
import { ManagerProgramWithdrawInfo } from '../model/managerProgramWithdrawInfo';
import { NewFundRequest } from '../model/newFundRequest';
import { NewProgramRequest } from '../model/newProgramRequest';
import { ProgramInvestInfo } from '../model/programInvestInfo';
import { ProgramRequests } from '../model/programRequests';
import { ProgramUpdate } from '../model/programUpdate';
import { ProgramsList } from '../model/programsList';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ManagerService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Manager assets list
     *
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerAssetsGet(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ManagerAssets>;
    public v10ManagerAssetsGet(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagerAssets>>;
    public v10ManagerAssetsGet(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagerAssets>>;
    public v10ManagerAssetsGet(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerAssetsGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ManagerAssets>(`${this.basePath}/v1.0/manager/assets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Manager details
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerByIdDetailsGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<ManagerProfileDetails>;
    public v10ManagerByIdDetailsGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagerProfileDetails>>;
    public v10ManagerByIdDetailsGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagerProfileDetails>>;
    public v10ManagerByIdDetailsGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerByIdDetailsGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ManagerProfileDetails>(`${this.basePath}/v1.0/manager/${encodeURIComponent(String(id))}/details`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Manager profile
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerByIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<ManagerProfile>;
    public v10ManagerByIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagerProfile>>;
    public v10ManagerByIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagerProfile>>;
    public v10ManagerByIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerByIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ManagerProfile>(`${this.basePath}/v1.0/manager/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Manager events
     *
     * @param authorization JWT access token
     * @param assetId
     * @param from
     * @param to
     * @param type
     * @param assetType
     * @param skip
     * @param take
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe?: 'body', reportProgress?: boolean): Observable<ManagerPortfolioEvents>;
    public v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagerPortfolioEvents>>;
    public v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagerPortfolioEvents>>;
    public v10ManagerEventsGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerEventsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (assetId !== undefined) {
            queryParameters = queryParameters.set('AssetId', <any>assetId);
        }
        if (from !== undefined) {
            queryParameters = queryParameters.set('From', <any>from.toISOString());
        }
        if (to !== undefined) {
            queryParameters = queryParameters.set('To', <any>to.toISOString());
        }
        if (type !== undefined) {
            queryParameters = queryParameters.set('Type', <any>type);
        }
        if (assetType !== undefined) {
            queryParameters = queryParameters.set('AssetType', <any>assetType);
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('Skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters = queryParameters.set('Take', <any>take);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ManagerPortfolioEvents>(`${this.basePath}/v1.0/manager/events`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update fund assets parts
     *
     * @param id
     * @param authorization JWT access token
     * @param assets
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: Array<FundAssetPart>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: Array<FundAssetPart>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: Array<FundAssetPart>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerFundsByIdAssetsUpdatePost(id: string, authorization: string, assets?: Array<FundAssetPart>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerFundsByIdAssetsUpdatePost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsByIdAssetsUpdatePost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/funds/${encodeURIComponent(String(id))}/assets/update`,
            assets,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Close existing fund
     *
     * @param id
     * @param authorization JWT access token
     * @param twoFactorCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerFundsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerFundsByIdClosePost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsByIdClosePost.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (twoFactorCode !== undefined) {
            queryParameters = queryParameters.set('twoFactorCode', <any>twoFactorCode);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/funds/${encodeURIComponent(String(id))}/close`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deposit
     *
     * @param id
     * @param amount
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerFundsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
        }
        if (amount === null || amount === undefined) {
            throw new Error('Required parameter amount was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsByIdInvestByAmountPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/funds/${encodeURIComponent(String(id))}/invest/${encodeURIComponent(String(amount))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Data for investing into the fund
     *
     * @param id
     * @param currency
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<FundInvestInfo>;
    public v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FundInvestInfo>>;
    public v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FundInvestInfo>>;
    public v10ManagerFundsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsByIdInvestInfoByCurrencyGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<FundInvestInfo>(`${this.basePath}/v1.0/manager/funds/${encodeURIComponent(String(id))}/invest/info/${encodeURIComponent(String(currency))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get investment program/fund requests
     *
     * @param id
     * @param skip
     * @param take
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ProgramRequests>;
    public v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProgramRequests>>;
    public v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProgramRequests>>;
    public v10ManagerFundsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
        }
        if (skip === null || skip === undefined) {
            throw new Error('Required parameter skip was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
        }
        if (take === null || take === undefined) {
            throw new Error('Required parameter take was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsByIdRequestsBySkipByTakeGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProgramRequests>(`${this.basePath}/v1.0/manager/funds/${encodeURIComponent(String(id))}/requests/${encodeURIComponent(String(skip))}/${encodeURIComponent(String(take))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update investment program/fund details
     *
     * @param id
     * @param authorization JWT access token
     * @param model
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerFundsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerFundsByIdUpdatePost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsByIdUpdatePost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/funds/${encodeURIComponent(String(id))}/update`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Withdraw from fund. Percent is % of investor total money.
     *
     * @param id
     * @param percent
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerFundsByIdWithdrawByPercentPost(id: string, percent: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
        }
        if (percent === null || percent === undefined) {
            throw new Error('Required parameter percent was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsByIdWithdrawByPercentPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/funds/${encodeURIComponent(String(id))}/withdraw/${encodeURIComponent(String(percent))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Data for withdrawal from fund
     *
     * @param id
     * @param currency
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ManagerFundWithdrawInfo>;
    public v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagerFundWithdrawInfo>>;
    public v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagerFundWithdrawInfo>>;
    public v10ManagerFundsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsByIdWithdrawInfoByCurrencyGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ManagerFundWithdrawInfo>(`${this.basePath}/v1.0/manager/funds/${encodeURIComponent(String(id))}/withdraw/info/${encodeURIComponent(String(currency))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create fund
     *
     * @param authorization JWT access token
     * @param request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerFundsCreatePost(authorization: string, request?: NewFundRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsCreatePost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/funds/create`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Manager funds
     *
     * @param authorization JWT access token
     * @param sorting
     * @param from
     * @param to
     * @param chartPointsCount
     * @param currencySecondary
     * @param skip
     * @param take
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'body', reportProgress?: boolean): Observable<FundsList>;
    public v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FundsList>>;
    public v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FundsList>>;
    public v10ManagerFundsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sorting !== undefined) {
            queryParameters = queryParameters.set('Sorting', <any>sorting);
        }
        if (from !== undefined) {
            queryParameters = queryParameters.set('From', <any>from.toISOString());
        }
        if (to !== undefined) {
            queryParameters = queryParameters.set('To', <any>to.toISOString());
        }
        if (chartPointsCount !== undefined) {
            queryParameters = queryParameters.set('ChartPointsCount', <any>chartPointsCount);
        }
        if (currencySecondary !== undefined) {
            queryParameters = queryParameters.set('CurrencySecondary', <any>currencySecondary);
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('Skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters = queryParameters.set('Take', <any>take);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<FundsList>(`${this.basePath}/v1.0/manager/funds`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get GVT investment to create fund
     *
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsInvestmentAmountGet(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public v10ManagerFundsInvestmentAmountGet(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public v10ManagerFundsInvestmentAmountGet(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public v10ManagerFundsInvestmentAmountGet(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsInvestmentAmountGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<number>(`${this.basePath}/v1.0/manager/funds/investment/amount`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cancel investment program/fund request
     *
     * @param id
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerFundsRequestsByIdCancelPost(id: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerFundsRequestsByIdCancelPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerFundsRequestsByIdCancelPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/funds/requests/${encodeURIComponent(String(id))}/cancel`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Manager dashboard
     *
     * @param authorization JWT access token
     * @param assetId
     * @param from
     * @param to
     * @param type
     * @param assetType
     * @param skip
     * @param take
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe?: 'body', reportProgress?: boolean): Observable<ManagerDashboard>;
    public v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagerDashboard>>;
    public v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagerDashboard>>;
    public v10ManagerGet(authorization: string, assetId?: string, from?: Date, to?: Date, type?: string, assetType?: string, skip?: number, take?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (assetId !== undefined) {
            queryParameters = queryParameters.set('AssetId', <any>assetId);
        }
        if (from !== undefined) {
            queryParameters = queryParameters.set('From', <any>from.toISOString());
        }
        if (to !== undefined) {
            queryParameters = queryParameters.set('To', <any>to.toISOString());
        }
        if (type !== undefined) {
            queryParameters = queryParameters.set('Type', <any>type);
        }
        if (assetType !== undefined) {
            queryParameters = queryParameters.set('AssetType', <any>assetType);
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('Skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters = queryParameters.set('Take', <any>take);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ManagerDashboard>(`${this.basePath}/v1.0/manager`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Close existing investment program
     *
     * @param id
     * @param authorization JWT access token
     * @param twoFactorCode
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerProgramsByIdClosePost(id: string, authorization: string, twoFactorCode?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerProgramsByIdClosePost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdClosePost.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (twoFactorCode !== undefined) {
            queryParameters = queryParameters.set('twoFactorCode', <any>twoFactorCode);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/programs/${encodeURIComponent(String(id))}/close`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deposit
     *
     * @param id
     * @param amount
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerProgramsByIdInvestByAmountPost(id: string, amount: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
        }
        if (amount === null || amount === undefined) {
            throw new Error('Required parameter amount was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdInvestByAmountPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/programs/${encodeURIComponent(String(id))}/invest/${encodeURIComponent(String(amount))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Data for investing into the program
     *
     * @param id
     * @param currency
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ProgramInvestInfo>;
    public v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProgramInvestInfo>>;
    public v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProgramInvestInfo>>;
    public v10ManagerProgramsByIdInvestInfoByCurrencyGet(id: string, currency: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdInvestInfoByCurrencyGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProgramInvestInfo>(`${this.basePath}/v1.0/manager/programs/${encodeURIComponent(String(id))}/invest/info/${encodeURIComponent(String(currency))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Close current period
     *
     * @param id
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerProgramsByIdPeriodClosePost(id: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerProgramsByIdPeriodClosePost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdPeriodClosePost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/programs/${encodeURIComponent(String(id))}/period/close`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get investment program/fund requests
     *
     * @param id
     * @param skip
     * @param take
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ProgramRequests>;
    public v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProgramRequests>>;
    public v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProgramRequests>>;
    public v10ManagerProgramsByIdRequestsBySkipByTakeGet(id: string, skip: number, take: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
        }
        if (skip === null || skip === undefined) {
            throw new Error('Required parameter skip was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
        }
        if (take === null || take === undefined) {
            throw new Error('Required parameter take was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdRequestsBySkipByTakeGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProgramRequests>(`${this.basePath}/v1.0/manager/programs/${encodeURIComponent(String(id))}/requests/${encodeURIComponent(String(skip))}/${encodeURIComponent(String(take))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update investment program/fund details
     *
     * @param id
     * @param authorization JWT access token
     * @param model
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerProgramsByIdUpdatePost(id: string, authorization: string, model?: ProgramUpdate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerProgramsByIdUpdatePost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdUpdatePost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/programs/${encodeURIComponent(String(id))}/update`,
            model,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Withdraw from program
     *
     * @param id
     * @param amount
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerProgramsByIdWithdrawByAmountPost(id: string, amount: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
        }
        if (amount === null || amount === undefined) {
            throw new Error('Required parameter amount was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawByAmountPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/programs/${encodeURIComponent(String(id))}/withdraw/${encodeURIComponent(String(amount))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Data for withdrawal from investment program
     *
     * @param id
     * @param currency
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ManagerProgramWithdrawInfo>;
    public v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ManagerProgramWithdrawInfo>>;
    public v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ManagerProgramWithdrawInfo>>;
    public v10ManagerProgramsByIdWithdrawInfoByCurrencyGet(id: string, currency: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsByIdWithdrawInfoByCurrencyGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ManagerProgramWithdrawInfo>(`${this.basePath}/v1.0/manager/programs/${encodeURIComponent(String(id))}/withdraw/info/${encodeURIComponent(String(currency))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create an investment program
     *
     * @param authorization JWT access token
     * @param request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerProgramsCreatePost(authorization: string, request?: NewProgramRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsCreatePost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/programs/create`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Manager programs
     *
     * @param authorization JWT access token
     * @param sorting
     * @param from
     * @param to
     * @param chartPointsCount
     * @param currencySecondary
     * @param skip
     * @param take
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'body', reportProgress?: boolean): Observable<ProgramsList>;
    public v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProgramsList>>;
    public v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProgramsList>>;
    public v10ManagerProgramsGet(authorization: string, sorting?: string, from?: Date, to?: Date, chartPointsCount?: number, currencySecondary?: string, skip?: number, take?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sorting !== undefined) {
            queryParameters = queryParameters.set('Sorting', <any>sorting);
        }
        if (from !== undefined) {
            queryParameters = queryParameters.set('From', <any>from.toISOString());
        }
        if (to !== undefined) {
            queryParameters = queryParameters.set('To', <any>to.toISOString());
        }
        if (chartPointsCount !== undefined) {
            queryParameters = queryParameters.set('ChartPointsCount', <any>chartPointsCount);
        }
        if (currencySecondary !== undefined) {
            queryParameters = queryParameters.set('CurrencySecondary', <any>currencySecondary);
        }
        if (skip !== undefined) {
            queryParameters = queryParameters.set('Skip', <any>skip);
        }
        if (take !== undefined) {
            queryParameters = queryParameters.set('Take', <any>take);
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProgramsList>(`${this.basePath}/v1.0/manager/programs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get GVT investment to create program
     *
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsInvestmentAmountGet(authorization: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public v10ManagerProgramsInvestmentAmountGet(authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public v10ManagerProgramsInvestmentAmountGet(authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public v10ManagerProgramsInvestmentAmountGet(authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsInvestmentAmountGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<number>(`${this.basePath}/v1.0/manager/programs/investment/amount`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Cancel investment program/fund request
     *
     * @param id
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public v10ManagerProgramsRequestsByIdCancelPost(id: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling v10ManagerProgramsRequestsByIdCancelPost.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerProgramsRequestsByIdCancelPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/v1.0/manager/programs/requests/${encodeURIComponent(String(id))}/cancel`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all requests
     *
     * @param skip
     * @param take
     * @param authorization JWT access token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ProgramRequests>;
    public v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProgramRequests>>;
    public v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProgramRequests>>;
    public v10ManagerRequestsBySkipByTakeGet(skip: number, take: number, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (skip === null || skip === undefined) {
            throw new Error('Required parameter skip was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
        }
        if (take === null || take === undefined) {
            throw new Error('Required parameter take was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
        }
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling v10ManagerRequestsBySkipByTakeGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ProgramRequests>(`${this.basePath}/v1.0/manager/requests/${encodeURIComponent(String(skip))}/${encodeURIComponent(String(take))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
